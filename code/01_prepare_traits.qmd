---
title: "Prepare traits"
format: html
editor: source
embed-resources: true
toc: true
toc-depth: 3
code-fold: true
params:
  ordfac: TRUE
---

```{r}
library(readxl)

library(dplyr)
library(stringr)
library(tidyr)
library(tibble)

library(ade4)
library(adegraphics)

library(here)

read_folder <- here("data/01_raw")
write_folder <- here("data/02_processed")
```

## Read data

```{r}
datlist <- list()
for(i in 1:6) {
  datlist[[i]] <- read_excel(file.path(read_folder,
                                       "OdonDatabase_life hist traits.xlsx"),
                             sheet = i)
}
names(datlist) <- c("taxonomy", "trend", "thermal", "imago", "exuviae", "flight")
```


## Merge data

```{r}
# Remove empty columns
datlist$thermal <- datlist$thermal[, c("Species_name", "STI", "SD", "No_squares")]
datlist$imago <- datlist$imago[, 1:(ncol(datlist$imago)-2)]

# Remove stars
datlist$imago$Species_name <- str_remove_all(datlist$imago$Species_name, 
                                             pattern = "\\*")

# Remove leading and trailing spaces
datlist <- lapply(datlist, 
                  function(x) {
                    x |> mutate(Species_name = str_remove_all(Species_name, 
                                                              pattern = "^\\s|\\s$"))}
                  )
```

```{r}
# Merge
df_raw <- Reduce(function(...) merge(..., by = 'Species_name', 
                                     all.x = TRUE), datlist)
```

## Format data

```{r}
# Rename columns
new_colnames <- str_replace(colnames(df_raw), " - ", "_")
new_colnames <- str_replace_all(new_colnames, " ", "_")
new_colnames <- str_replace_all(new_colnames, "\\.", "_")
new_colnames <- str_replace_all(new_colnames, "\\&", "and")
new_colnames <- str_replace_all(new_colnames, "\\(|\\)", "")

df <- df_raw
colnames(df) <- new_colnames
```

```{r}
# Missing values
df[df == "NA"] <- NA

df$Population_trend[df$Population_trend == "Unknown"] <- NA

df[df == "Not relevant"] <- "NaN"

# Remove the "source" columns
df <- df[, grep("_Source", colnames(df), invert = TRUE)]
```

```{r}
# Add suborder
Suborder_vec <- c(rep("Zygoptera", 5), rep("Anisoptera", 7))
names(Suborder_vec) <- c("Calopterygidae", "Lestidae", "Coenagrionidae",
                         "Platycnemidae", "Epallagidae",
                         "Aeshnidae", "Gomphidae", "Cordulegastridae",
                         "Macromiidae", "Corduliidae", "Libellulidae", "Syntemistidae")

df <- df |> 
  mutate(Suborder = unname(Suborder_vec[Family]), 
         .before = "Family")

# Add Endangered/Least concern
Conservation_vec <- c(rep("Least Concern", 2), 
                      rep("Endangered", 3), "Data Deficient")
names(Conservation_vec) <- c("LC", "NT", "VU", "EN", "CR", "DD")
df <- df |> 
  mutate(Conservation =  unname(Conservation_vec[ERL_2024_category]), 
         .before = "ERL_2024_category")

```

```{r}
# Recode flight period
start_months <- 1:12
names(start_months) <- c("January", "February", "March", "April",
                         "May", "June", "July", "August",
                         "September", "October", "November",
                         "December")

df <- df |> 
  mutate(start_main_flight_period = unname(start_months[start_main_flight_period])) |> 
  mutate(end_main_flight_period = unname(start_months[end_main_flight_period])) |> 
  mutate(flight_period_length = unname(end_main_flight_period - start_main_flight_period + 1))

if (any(df$flight_period_length < 0, na.rm = TRUE)) {
  warning("Flight length < 0 for some species")
}
```

```{r}
# Character to numeric
df <- df |> 
  mutate(across(ends_with("voltine"),
                as.numeric))

df <- df |> mutate(across(starts_with("Exuvia"), 
                          as.numeric))

df <- df |> mutate(across(starts_with("Body_size"), 
                          as.numeric))
df <- df |> mutate(across(starts_with("Abdomen_length"), 
                          as.numeric))
df$EOO_EU27 <- as.numeric(df$EOO_EU27)
df$AOO_EU27 <- as.numeric(df$AOO_EU27)
```


```{r}
# Character to factor
df <- df |> mutate(across(where(is.character), factor))

df$ERL_2024_category <- factor(df$ERL_2024_category,
                               levels = c("LC", "NT", "VU", "EN", "CR", "DD"))

df$Population_trend <- factor(df$Population_trend,
                              levels = c("Decreasing", "Stable", "Increasing"), 
                              ordered = params$ordfac)

df$Overwintering_stage <- factor(df$Overwintering_stage,
                                 levels = c("egg", "egg/larva", "larva", "adult"), 
                                 ordered = params$ordfac)

df$Coloration_class <- factor(df$Coloration_class,
                                 levels = c("pale", "intermediate", "dark"), 
                                 ordered = params$ordfac)

df$Perchers_and_fliers <- factor(df$Perchers_and_fliers,
                                 levels = c("flier",
                                            "flier/percher",
                                            "percher"),
                                 ordered = params$ordfac)
```

```{r}
# Short names
short_names <- str_remove(df$Species_name, "(?<=^[A-Z])[a-z]*")
short_names <- str_replace_all(short_names, " ", "_")

df <- df |> 
  mutate(short_names = short_names, 
         .before = 1)
```

```{r}
# Issue with voltinism values
# df |> select(ends_with("voltine")) |> filter(Partivoltine > 1)
# df |> select(ends_with("voltine")) |> filter(Bivoltine >1)
df$Partivoltine[df$Partivoltine > 1 & !is.na(df$Partivoltine)] <- 1
df$Bivoltine[df$Bivoltine > 1 & !is.na(df$Bivoltine)] <- 1
```

## Body size multivariate analysis

```{r}
df_size <- df |> 
  select(Body_size_Min, Body_size_Max, 
         Abdomen_length_Min, Abdomen_length_Max,
         Hind_wing_Min, Hind_wing_Max,
         Exuvia_Tot_length_Min, Exuvia_Tot_length_Max)

# Numeric
df_size <- as.data.frame(apply(df_size, 2, as.numeric))
rownames(df_size) <- df$short_names

# NA
df_size_mvar <- na.omit(df_size)
```

```{r}
pca_size <- dudi.pca(df_size_mvar, scannf = FALSE, nf = 3)

s.corcircle(pca_size$c1, plabels.boxes.draw = FALSE)
s.label(pca_size$li)
```


```{r}
pca_size$eig/sum(pca_size$eig) # First axis explains 91 %
```


```{r}
body_size <- -pca_size$li[, 1] # invert axes so that bigger scores correspond to larger odonates

# Select species subset for which size is available
ind_sp_not_na <- match(rownames(df_size_mvar), df$short_names)
sp_not_na <- df$Species_name[ind_sp_not_na]

size_names_df <- data.frame(Species_name = sp_not_na,
                            Body_size_PCA = body_size)
```

```{r}
# Add body size to df
df_body_size <- df |> 
  left_join(size_names_df, by = "Species_name") 

df_body_size <- df_body_size |> 
  relocate(Body_size_PCA, .before = "Body_size_Min")
```

## Dispersion

```{r}
# Create dispersion index
df_body_size <- df_body_size |> 
  group_by(Species_name) |> 
  mutate(Hind_wing_Mean = mean(c(Hind_wing_Min, 
                                 Hind_wing_Max)),
         .after = Hind_wing_Max) |> 
  mutate(Body_size_Mean = mean(c(Body_size_Min, 
                                 Body_size_Max)),
         .after = Body_size_Max) |> 
  ungroup()

df_body_size <- df_body_size |> 
  mutate(dispersion = Hind_wing_Mean/Body_size_Mean,
         .after = Hind_wing_Mean)
```

## Recode columns

```{r}
# Recode voltinism
df_recode <- df_body_size

df_recode$Partivoltine[df_recode$Partivoltine == 1] <- "Partivoltine"
df_recode$Semivoltine[df_recode$Semivoltine == 1] <- "Semivoltine"
df_recode$Univoltine[df_recode$Univoltine == 1] <- "Univoltine"
df_recode$Bivoltine[df_recode$Bivoltine == 1] <- "Bivoltine"
df_recode <- df_recode |> 
  mutate(voltinism = paste(Partivoltine,
                           Semivoltine,
                           Univoltine,
                           Bivoltine, sep = "-"),
         .before = "Partivoltine")

# Remove zeroes
df_recode$voltinism <- str_remove_all(df_recode$voltinism, "-*0-*")

# Simplification
df_recode$voltinism <- str_remove_all(df_recode$voltinism, "-*NA-*")

# NA recoding
df_recode$voltinism[df_recode$voltinism == ""] <- NA

unique(df_recode$voltinism)

df_recode$voltinism <- factor(df_recode$voltinism,
                            levels = c("Partivoltine",
                                       "Partivoltine-Semivoltine",
                                       "Partivoltine-Semivoltine-Univoltine", # not sure
                                       "Semivoltine",
                                       "Semivoltine-Univoltine",
                                       "Semivoltine-Univoltine-Bivoltine",
                                       "Univoltine",
                                       "Univoltine-Bivoltine",
                                       "Bivoltine"),
                            ordered = params$ordfac)
```

```{r}
# levels(df_recode$habitattype)

# recode habitat
habitat <- as.character(df_recode$habitattype)
habitat[habitat == "Streams and rivers"] <- "streams and rivers"

df_recode$habitattype <- factor(habitat)
# levels(df_recode$habitattype)
```

```{r}
# Row names
df_recode <- df_recode |> 
  column_to_rownames("short_names")
```

```{r}
write.csv(df_recode, 
          file.path(write_folder, "taxo_traits.csv"),
          row.names = TRUE)
saveRDS(df_recode, 
        file.path(write_folder, "taxo_traits.rds"))
```

