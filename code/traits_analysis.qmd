---
title: "Odonates traits"
format: html
editor: source
embed-resources: true
toc: true
toc-depth: 3
---

```{r}
library(readxl)
library(ade4)
library(adegraphics)

library(ggplot2)
library(RColorBrewer)

library(dplyr)
library(stringr)
library(tidyr)

library(here)
```

## Read data

```{r}
datlist <- list()
for(i in 1:6) {
  datlist[[i]] <- read_excel(here(file.path("data", 
                                            "OdonDatabase_life hist traits.xlsx")),
                               sheet = i)
}
names(datlist) <- c("taxonomy", "trend", "thermal", "imago", "exuviae", "flight")
```

## Merge data

```{r}
# Remove empty columns
datlist$thermal <- datlist$thermal[, c("Species_name", "STI", "SD", "No_squares")]
datlist$imago <- datlist$imago[, 1:(ncol(datlist$imago)-2)]

# Remove stars
datlist$imago$Species_name <- str_remove_all(datlist$imago$Species_name, 
                                             pattern = "\\*")

# Remove leading and trailing spaces
datlist <- lapply(datlist, 
                  function(x) {
                    x |> mutate(Species_name = str_remove_all(Species_name, 
                                                              pattern = "^\\s|\\s$"))}
                  )
```

```{r}
# Merge
df_all <- Reduce(function(...) merge(..., by = 'Species_name', 
                                     all.x = TRUE), datlist)
```

## Prepare data

```{r}
# Rename columns
new_colnames <- str_replace(colnames(df_all), " - ", "_")
new_colnames <- str_replace_all(new_colnames, " ", "_")
new_colnames <- str_replace_all(new_colnames, "\\.", "_")
new_colnames <- str_replace_all(new_colnames, "\\&", "and")
new_colnames <- str_replace_all(new_colnames, "\\(|\\)", "")

df <- df_all
colnames(df) <- new_colnames
```

```{r}
# Missing values
df[df == "NA"] <- NA

df$Population_trend[df$Population_trend == "Unknown"] <- NA

df[df == "Not relevant"] <- "NaN"

# Remove the "source" columns

df <- df[, grep("_Source", colnames(df), invert = TRUE)]
```

```{r}
df <- df |> 
  mutate(across(ends_with("voltine"),
                as.numeric))

df <- df |> mutate(across(starts_with("Exuvia"), 
                          as.numeric))
df <- df |> mutate(across(where(is.character), factor))

df$ERL_2024_category <- factor(df$ERL_2024_category,
                               levels = c("LC", "NT", "VU", "EN", "CR"), 
                               ordered = TRUE)

df$Population_trend <- factor(df$Population_trend,
                              levels = c("Decreasing", "Stable", "Increasing"), 
                              ordered = TRUE)

df$Overwintering_stage <- factor(df$Overwintering_stage,
                                 levels = c("egg", "egg/larva", "larva", "adult"), 
                                 ordered = TRUE)

df$Coloration_class <- factor(df$Coloration_class,
                                 levels = c("pale", "intermediate", "dark"), 
                                 ordered = TRUE)
```

```{r}
# Short names
short_names <- str_remove(df$Species_name, "(?<=^[A-Z])[a-z]*")
short_names <- str_replace_all(short_names, " ", "_")

df <- df |> 
  mutate(short_names = short_names, 
         .before = 1)
```

```{r}
# Issue with voltinism values
# df |> select(ends_with("voltine")) |> filter(Partivoltine > 1)
# df |> select(ends_with("voltine")) |> filter(Bivoltine >1)
df$Partivoltine[df$Partivoltine > 1 & !is.na(df$Partivoltine)] <- 1
df$Bivoltine[df$Bivoltine > 1 & !is.na(df$Bivoltine)] <- 1
```


## Body size multivariate analysis

```{r}
df_size <- df |> 
  select(Body_size_Min, Body_size_Max, 
         Abdomen_length_Min, Abdomen_length_Max,
         Hind_wing_Min, Hind_wing_Max,
         Exuvia_Tot_length_Min, Exuvia_Tot_length_Max)

# Numeric
df_size <- as.data.frame(apply(df_size, 2, as.numeric))
rownames(df_size) <- df$short_names

# NA
df_size_mvar <- na.omit(df_size)
```

```{r}
pca_size <- dudi.pca(df_size_mvar, scannf = FALSE, nf = 3)

s.corcircle(pca_size$c1)
s.label(pca_size$li)
```


```{r}
pca_size$eig/sum(pca_size$eig) # First axis explains 91 %
```


```{r}
body_size <- -pca_size$li[, 1] # invert axes so that bigger scores correspond to larger odonates

# Select species subset for which size is avaliable
ind_sp_not_na <- match(rownames(df_size_mvar), df$short_names)
sp_not_na <- df$Species_name[ind_sp_not_na]

body_size_df <- data.frame(Species_name = sp_not_na,
                           body_size = body_size)
```

```{r}
# Add body size to df
df_body_size <- df |> 
  left_join(body_size_df, by = "Species_name")
```


## Odonata trait space

```{r}
# Rename STI and SD
df_body_size <- df_body_size |> 
  rename("Temp_mean" = "STI",
         "Temp_sd" = "SD")
```

```{r}
# # Add dispersal
# df_relevant <- df_body_size |> 
#   mutate(body_size_mean = (as.numeric(Body_size_Min) + as.numeric(Body_size_Max))/2,
#          wing_length_mean = (Hind_wing_Min + Hind_wing_Max)/2) |> 
#   mutate(dispersal = wing_length_mean/body_size_mean)

df_relevant <- df_body_size |> 
  select(body_size, 
         # dispersal,
         habitattype, 
         Temp_mean, Temp_sd, # to update + an aridity index will be added
         Coloration_class,
         ends_with("voltine"),
         Perchers_and_fliers,
         Overwintering_stage,
         Larval_strategy, 
         Oviposition_substrate)
# add average latitude + sd
# dispersion index could be good -> computed with wing length and body mass
```

```{r}
# Recode voltinism
df_mvar <- df_relevant

df_mvar$Partivoltine[df_mvar$Partivoltine == 1] <- "Partivoltine"
df_mvar$Semivoltine[df_mvar$Semivoltine == 1] <- "Semivoltine"
df_mvar$Univoltine[df_mvar$Univoltine == 1] <- "Univoltine"
df_mvar$Bivoltine[df_mvar$Bivoltine == 1] <- "Bivoltine"
df_mvar <- df_mvar |> 
  mutate(voltinism = paste(Partivoltine,
                           Semivoltine,
                           Univoltine,
                           Bivoltine, sep = "-"),
         .before = "Partivoltine") |> 
  select(-(ends_with("voltine")))

df_mvar$voltinism <- str_remove_all(df_mvar$voltinism, "-*0-*")

# Simplification
df_mvar$voltinism <- str_remove_all(df_mvar$voltinism, "-*NA-*")

# NA recoding
df_mvar$voltinism[df_mvar$voltinism == ""] <- NA

df_mvar$voltinism <- factor(df_mvar$voltinism,
                            levels = c("Partivoltine",
                                       "Partivoltine-Semivoltine",
                                       "Partivoltine-Semivoltine-Univoltine", # not sure
                                       "Semivoltine",
                                       "Semivoltine-Univoltine",
                                       "Semivoltine-Univoltine-Bivoltine",
                                       "Univoltine",
                                       "Univoltine-Bivoltine",
                                       "Bivoltine"),
                            ordered = TRUE)
```

```{r}
# levels(df_mvar$habitattype)

# recode habitat
habitat <- as.character(df_mvar$habitattype)
habitat[habitat == "southern Streams and rivers"] <- "streams and rivers"
habitat[habitat == "Streams and rivers"] <- "streams and rivers"

# Shorter names
habitat[habitat == "streams and rivers"] <- "streams"
habitat[habitat == "temporary waters"] <- "temporary"


df_mvar$habitattype <- factor(habitat)
# levels(df_mvar$habitattype)
```


```{r}
# Row names
rownames(df_mvar) <- df$short_names

# NA
df_mvar <- na.omit(df_mvar)

# Rename rows
colnames(df_mvar) <- c("body_size", "habitat", "tmean",
                       "tsd", "color", "voltinism",
                       "adult_behavior", "winter", 
                       "larva_behavior", "oviposition")
```

```{r}
mvar <- dudi.mix(df_mvar, nf = 3, scannf = FALSE)
```

```{r}
ggplot() +
  geom_col(aes(y = mvar$eig, x = 1:length(mvar$eig)))
```

```{r}
s.corcircle(mvar$c1)

s.label(mvar$li)
s.label(mvar$li, 
        labels = rownames(df_mvar))
```

```{r}
ind <- na.omit(match(rownames(df_mvar), df$short_names))
df_fac <- df[ind, ]
```

```{r}
s.class(mvar$li, 
        fac = df_fac$Family,
        col = brewer.pal(12, "Set3"))
```

```{r}
s.class(mvar$li, 
        fac = df_fac$ERL_2024_category,
        col = brewer.pal(4, "PuOr"))
s.class(mvar$li, 
        fac = df_fac$Population_trend,
        col = brewer.pal(3, "PuOr"))
```

## Discriminant analysis on conservation status

```{r}
discri <- discrimin(mvar, 
                    fac = factor(df_fac$ERL_2024_category, 
                                 ordered = FALSE),
                    scannf = FALSE, nf = 3)
```

```{r}
s.label(discri$li)
s.label(discri$li, labels = rownames(df_mvar))

s.corcircle(discri$fa)
s.corcircle(discri$gc*0.8, 
            plabels.col = "darkred", 
            plines.col = "darkred", add = TRUE)

s.class(discri$li,
        fac = factor(df_fac$ERL_2024_category, ordered = FALSE),
        col = brewer.pal(4, "PuOr"))
```

```{r}
discri <- discrimin(mvar, 
                    fac = factor(df_fac$Population_trend, 
                                 ordered = FALSE),
                    scannf = FALSE, nf = 3)
```

```{r}
s.label(discri$li)
s.label(discri$li, labels = rownames(df_mvar))

s.corcircle(discri$fa)
s.corcircle(discri$gc*0.8, 
            plabels.col = "darkred", 
            plines.col = "darkred", add = TRUE)

s.class(discri$li,
        fac = factor(df_fac$Population_trend, ordered = FALSE),
        col = brewer.pal(3, "PuOr"))
```
