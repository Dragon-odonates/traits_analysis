---
title: "Odonates traits"
format: html
editor: source
embed-resources: true
toc: true
toc-depth: 3
code-fold: true
params:
  ordfac: FALSE
---

```{r}
library(readxl)
library(ade4)
library(adegraphics)

library(ggplot2)
library(RColorBrewer)

library(dplyr)
library(stringr)
library(tidyr)

library(here)
```

## Read data

```{r}
datlist <- list()
for(i in 1:6) {
  datlist[[i]] <- read_excel(here(file.path("data", 
                                            "OdonDatabase_life hist traits.xlsx")),
                               sheet = i)
}
names(datlist) <- c("taxonomy", "trend", "thermal", "imago", "exuviae", "flight")
```

## Prepare data

### Merge data

```{r}
# Remove empty columns
datlist$thermal <- datlist$thermal[, c("Species_name", "STI", "SD", "No_squares")]
datlist$imago <- datlist$imago[, 1:(ncol(datlist$imago)-2)]

# Remove stars
datlist$imago$Species_name <- str_remove_all(datlist$imago$Species_name, 
                                             pattern = "\\*")

# Remove leading and trailing spaces
datlist <- lapply(datlist, 
                  function(x) {
                    x |> mutate(Species_name = str_remove_all(Species_name, 
                                                              pattern = "^\\s|\\s$"))}
                  )
```

```{r}
# Merge
df_raw <- Reduce(function(...) merge(..., by = 'Species_name', 
                                     all.x = TRUE), datlist)
```

### Format data

```{r}
# Rename columns
new_colnames <- str_replace(colnames(df_raw), " - ", "_")
new_colnames <- str_replace_all(new_colnames, " ", "_")
new_colnames <- str_replace_all(new_colnames, "\\.", "_")
new_colnames <- str_replace_all(new_colnames, "\\&", "and")
new_colnames <- str_replace_all(new_colnames, "\\(|\\)", "")

df <- df_raw
colnames(df) <- new_colnames
```

```{r}
# Missing values
df[df == "NA"] <- NA

df$Population_trend[df$Population_trend == "Unknown"] <- NA

df[df == "Not relevant"] <- "NaN"

# Remove the "source" columns
df <- df[, grep("_Source", colnames(df), invert = TRUE)]
```

```{r}
# Add suborder
Suborder_vec <- c(rep("Zygoptera", 5), rep("Anisoptera", 7))
names(Suborder_vec) <- c("Calopterygidae", "Lestidae", "Coenagrionidae",
                         "Platycnemidae", "Epallagidae",
                         "Aeshnidae", "Gomphidae", "Cordulegastridae",
                         "Macromiidae", "Corduliidae", "Libellulidae", "Syntemistidae")

df <- df |> 
  mutate(Suborder = Suborder_vec[Family], .before = "Family")

# Add Endangered/Least concern
Conservation_vec <- c(rep("Least Concern", 2), 
                      rep("Endangered", 3), "Data Deficient")
names(Conservation_vec) <- c("LC", "NT", "VU", "EN", "CR", "DD")
df <- df |> 
  mutate(Conservation =  Conservation_vec[ERL_2024_category], 
         .before = "ERL_2024_category")

```

```{r}
# Recode flight period
start_months <- 1:12
names(start_months) <- c("January", "February", "March", "April",
                         "May", "June", "July", "August",
                         "September", "October", "November",
                         "December")

df <- df |> 
  mutate(start_main_flight_period = start_months[start_main_flight_period]) |> 
  mutate(end_main_flight_period = start_months[end_main_flight_period]) |> 
  mutate(flight_period_length = end_main_flight_period - start_main_flight_period + 1)

if (any(df$flight_period_length < 0, na.rm = TRUE)) {
  warning("Flight length < 0 for some species")
}
```

```{r}
df <- df |> 
  mutate(across(ends_with("voltine"),
                as.numeric))

df <- df |> mutate(across(starts_with("Exuvia"), 
                          as.numeric))
df <- df |> mutate(across(where(is.character), factor))

df$ERL_2024_category <- factor(df$ERL_2024_category,
                               levels = c("LC", "NT", "VU", "EN", "CR", "DD"))

df$Population_trend <- factor(df$Population_trend,
                              levels = c("Decreasing", "Stable", "Increasing"), 
                              ordered = params$ordfac)

df$Overwintering_stage <- factor(df$Overwintering_stage,
                                 levels = c("egg", "egg/larva", "larva", "adult"), 
                                 ordered = params$ordfac)

df$Coloration_class <- factor(df$Coloration_class,
                                 levels = c("pale", "intermediate", "dark"), 
                                 ordered = params$ordfac)
```

```{r}
# Short names
short_names <- str_remove(df$Species_name, "(?<=^[A-Z])[a-z]*")
short_names <- str_replace_all(short_names, " ", "_")

df <- df |> 
  mutate(short_names = short_names, 
         .before = 1)
```

```{r}
# Issue with voltinism values
# df |> select(ends_with("voltine")) |> filter(Partivoltine > 1)
# df |> select(ends_with("voltine")) |> filter(Bivoltine >1)
df$Partivoltine[df$Partivoltine > 1 & !is.na(df$Partivoltine)] <- 1
df$Bivoltine[df$Bivoltine > 1 & !is.na(df$Bivoltine)] <- 1
```

## Body size multivariate analysis

```{r}
df_size <- df |> 
  select(Body_size_Min, Body_size_Max, 
         Abdomen_length_Min, Abdomen_length_Max,
         Hind_wing_Min, Hind_wing_Max,
         Exuvia_Tot_length_Min, Exuvia_Tot_length_Max)

# Numeric
df_size <- as.data.frame(apply(df_size, 2, as.numeric))
rownames(df_size) <- df$short_names

# NA
df_size_mvar <- na.omit(df_size)
```

```{r}
pca_size <- dudi.pca(df_size_mvar, scannf = FALSE, nf = 3)

s.corcircle(pca_size$c1, plabels.boxes.draw = FALSE)
s.label(pca_size$li)
```


```{r}
pca_size$eig/sum(pca_size$eig) # First axis explains 91 %
```


```{r}
body_size <- -pca_size$li[, 1] # invert axes so that bigger scores correspond to larger odonates

# Select species subset for which size is avaliable
ind_sp_not_na <- match(rownames(df_size_mvar), df$short_names)
sp_not_na <- df$Species_name[ind_sp_not_na]

size_names_df <- data.frame(Species_name = sp_not_na,
                            body_size = body_size)
```

```{r}
# Add body size to df
df_body_size <- df |> 
  left_join(size_names_df, by = "Species_name") 
```

## Odonata trait space

### Prepare data

```{r}
df_relevant <- df_body_size |> 
  select(body_size, 
         habitattype, 
         STI, SD, # to update + an aridity index will be added
         start_main_flight_period, 
         flight_period_length,
         Coloration_class,
         ends_with("voltine"),
         Perchers_and_fliers,
         Overwintering_stage,
         Larval_strategy, 
         Oviposition_substrate)
# add average latitude + sd
# dispersion index could be good
```

```{r}
# Recode voltinism
df_mvar <- df_relevant

df_mvar$Partivoltine[df_mvar$Partivoltine == 1] <- "Partivoltine"
df_mvar$Semivoltine[df_mvar$Semivoltine == 1] <- "Semivoltine"
df_mvar$Univoltine[df_mvar$Univoltine == 1] <- "Univoltine"
df_mvar$Bivoltine[df_mvar$Bivoltine == 1] <- "Bivoltine"
df_mvar <- df_mvar |> 
  mutate(voltinism = paste(Partivoltine,
                           Semivoltine,
                           Univoltine,
                           Bivoltine, sep = "-"),
         .before = "Partivoltine") |> 
  select(-(ends_with("voltine")))

# Remove zeroes
df_mvar$voltinism <- str_remove_all(df_mvar$voltinism, "-*0-*")

# Simplification
df_mvar$voltinism <- str_remove_all(df_mvar$voltinism, "-*NA-*")

# NA recoding
df_mvar$voltinism[df_mvar$voltinism == ""] <- NA

unique(df_mvar$voltinism)

df_mvar$voltinism <- factor(df_mvar$voltinism,
                            levels = c("Partivoltine",
                                       "Partivoltine-Semivoltine",
                                       "Partivoltine-Semivoltine-Univoltine", # not sure
                                       "Semivoltine",
                                       "Semivoltine-Univoltine",
                                       "Semivoltine-Univoltine-Bivoltine",
                                       "Univoltine",
                                       "Univoltine-Bivoltine",
                                       "Bivoltine"),
                            ordered = params$ordfac)
```

```{r}
# levels(df_mvar$habitattype)

# recode habitat
habitat <- as.character(df_mvar$habitattype)
# habitat[habitat == "southern Streams and rivers"] <- "streams and rivers"
habitat[habitat == "Streams and rivers"] <- "streams and rivers"

# Shorter names
habitat[habitat == "streams and rivers"] <- "streams"
habitat[habitat == "temporary waters"] <- "temp_water"
habitat[habitat == "southern Streams and rivers"] <- "southern_streams"

df_mvar$habitattype <- factor(habitat)
# levels(df_mvar$habitattype)
```

```{r}
unique(df_mvar$start_main_flight_period)
```

```{r}
# Row names
rownames(df_mvar) <- df$short_names

# NA
df_mvar <- na.omit(df_mvar)

# Rename rows
colnames(df_mvar) <- c("body_size", "habitat", 
                       "tmean", "tsd", 
                       "flight_start", "flight_length",
                       "color", "voltinism",
                       "behavior", "winter", 
                       "larva_strat", "oviposition")
```



```{r}
# # Check normality of numeric columns
# df_num <- df_mvar |> 
#   select(where(is.numeric))
# 
# ggplot(df_num) +
#   geom_density(aes(x = body_size))
# ggplot(df_num) +
#   geom_density(aes(x = tsd))
# ggplot(df_num) +
#   geom_density(aes(x = tmean))
```

### Perform analysis

```{r}
if (params$ordfac) {
  # Mix (extended Hill-Smith) with ordered factors
  mvar <- dudi.mix(df_mvar, nf = 3,
                   scannf = FALSE)
} else {
  # Hill-Smith with unordered factors
  mvar <- dudi.hillsmith(df_mvar, nf = 3, 
                         scannf = FALSE)
}
```

```{r}
ggplot() +
  geom_col(aes(y = mvar$eig, x = 1:length(mvar$eig)))
```

```{r}
s.corcircle(mvar$c1, 
            plabels.boxes.draw = FALSE)

corvar <- mvar$cr
corvar <- data.frame(corvar)
corvar$names <- rownames(mvar$cr)

ggplot(corvar) +
  geom_point(aes(x = reorder(names, RS1), 
               y = RS1)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r}
s.label(mvar$li,
        plabels.cex = 0)
s.label(mvar$li,
        labels = rownames(df_mvar),
        plabels.col = "darkgrey",
        plabels.optim = TRUE)
```

```{r}
# Select the rows of the full dataframe present in the analysis
ind <- na.omit(match(rownames(df_mvar), df$short_names))
df_fac <- df[ind, ]
```

```{r}
# Taxonomic classes
s.class(mvar$li,
        fac = df_fac$Suborder,
        col = c("darkorange", "cornflowerblue"))

nfam <- length(levels(df_fac$Family))
pal_fam <- colorRampPalette( brewer.pal(8, "Dark2") )(nfam)
s.class(mvar$li, 
        fac = df_fac$Family,
        col = pal_fam)

ngen <- length(levels(df_fac$Genus))
pal_gen <- colorRampPalette( brewer.pal(8, "Dark2") )(ngen)
s.class(mvar$li, 
        fac = df_fac$Genus,
        plabels.cex = 0.7,
        col = pal_gen)
```

```{r}
col_conservation <- c("darkolivegreen1", "darkorchid4")
col_redlist <- c("darkolivegreen1", "orange",
                 "brown3", "darkorchid4")
col_trend <- c("brown4", "pink", "cornflowerblue")

s.class(mvar$li, 
        fac = df_fac$Conservation,
        col = col_conservation)
s.class(mvar$li, 
        fac = df_fac$ERL_2024_category,
        col = col_redlist)
s.class(mvar$li, 
        fac = df_fac$Population_trend,
        col = col_trend)
```

## Discriminant analysis on conservation status

### Red list category

```{r}
discri <- discrimin(mvar, 
                    fac = factor(df_fac$ERL_2024_category),
                    scannf = FALSE, nf = 3)
```

```{r}
s.label(discri$li, plabels.cex = 0)
s.label(discri$li, 
        labels = rownames(df_mvar),
        plabels.col = "darkgrey",
        plabels.optim = TRUE)

s.class(discri$li, 
        fac = df_fac$Family,
        col = pal_fam)
```

```{r}
s.corcircle(discri$va, 
            plabels.boxes.draw = FALSE)
# s.corcircle(discri$gc*0.8, 
#             plabels.col = "darkred", 
#             plines.col = "darkred", add = TRUE)

corvar <- data.frame(discri$va)
corvar$names <- rownames(discri$va)

ggplot(corvar) +
  geom_point(aes(x = reorder(names, CS1), 
               y = CS1)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r}
s.corcircle(discri$cp[1:3, ])
```

```{r}
s.class(discri$li,
        fac = df_fac$ERL_2024_category,
        col = col_redlist)
```

```{r}
sum(discri$eig)/sum(mvar$eig)
rtest(discri, nrepet = 999)
```


```{r}
s.image(discri$li,
        df_fac$AOO_Europe)
s.label(discri$li,
        plabels.cex = 0,
        add = TRUE)

s.class(discri$li,
        fac = df_mvar$habitat,
        col = brewer.pal(6, "Dark2"))
```


### Conservation status

```{r}
discri <- discrimin(mvar, 
                    fac = factor(df_fac$Conservation),
                    scannf = FALSE, nf = 1)
```


```{r}
corvar <- data.frame(discri$va)
corvar$names <- rownames(discri$va)

ggplot(corvar) +
  geom_point(aes(x = reorder(names, CS1), 
               y = CS1)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
s1d.class(score = discri$li, 
          fac = factor(df_fac$Conservation),
          col = rev(col_conservation))
```

```{r}
sum(discri$eig)/sum(mvar$eig)
rtest(discri, nrepet = 999)
```


```{r}
s1d.class(discri$li,
        fac = df_mvar$habitat,
        col = brewer.pal(6, "Dark2"))
```

### Trend

```{r}
discri <- discrimin(mvar, 
                    fac = factor(df_fac$Population_trend),
                    scannf = FALSE, nf = 3)
```


```{r}
s.label(discri$li, plabels.cex = 0)
s.label(discri$li, 
        labels = rownames(df_mvar),
        plabels.col = "darkgrey",
        plabels.optim = TRUE)
s.class(discri$li, 
        fac = df_fac$Family,
        col = pal_fam)
```

```{r}
s.corcircle(discri$va, 
            plabels.boxes.draw = FALSE)
# s.corcircle(discri$gc*0.8, 
#             plabels.col = "darkred", 
#             plines.col = "darkred", add = TRUE)

corvar <- discri$va
corvar <- data.frame(corvar)
corvar$names <- rownames(discri$va)

ggplot(corvar) +
  geom_point(aes(x = reorder(names, CS1), 
               y = CS1)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```


```{r}
s.corcircle(discri$cp[1:3, ])
```

```{r}
s.class(discri$li,
        fac = df_fac$Population_trend,
        col = col_trend)
```

```{r}
sum(discri$eig)/sum(mvar$eig)
rtest(discri, nrepet = 999)
```

```{r}
s.image(discri$li,
        df_fac$AOO_Europe)
s.label(discri$li,
        plabels.cex = 0,
        add = TRUE)

s.class(discri$li,
        fac = df_mvar$habitat,
        col = brewer.pal(6, "Dark2"))
```